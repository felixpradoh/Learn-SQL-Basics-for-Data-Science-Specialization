-- AB Testing Final Assignment
-- We are running an experiment at an item-level, which means all users who visit 
-- will see the same page, but the layout of different item pages may differ.

-- Compare this table to the assignment events we captured for user_level_testing.
-- Does this table have everything you need to compute metrics like 30-day view-binary?
-- Answer is No. The created_at date is needed.

SELECT 
    * 
FROM 
    dsv1069.final_assignments_qa;

-- Reformat the final_assignments_qa to look like the final_assignments table, 
-- filling in any missing values with a placeholder of the appropriate data type.

SELECT 
  item_id,
  test_a       AS test_assignment, 
  'test_#'     AS test_number, 
  '2023-01-01' AS test_start_date
FROM 
  dsv1069.final_assignments_qa

-- Use this table to 
-- compute order_binary for the 30 day window after the test_start_date
-- for the test named item_test_2

SELECT
  test_assignment,
  COUNT(item_id) AS items,
  SUM(order_binary_30d) AS items_ordered_30d
FROM
  (
    SELECT 
     final.test_assignment,
     final.item_id, 
     MAX(CASE WHEN orders.created_at > final.test_start_date 
              THEN 1 ELSE 0 
              END) AS order_binary_30d
    FROM 
      dsv1069.final_assignments AS final
      
    LEFT OUTER JOIN
      dsv1069.orders
    ON 
      final.item_id = orders.item_id 
    AND 
      orders.created_at >= final.test_start_date
    AND 
      DATE_PART('day', orders.created_at - final.test_start_date ) <= 30
    WHERE 
      final.test_number= 'item_test_2'
    GROUP BY
      final.test_assignment,
      final.item_id
  ) AS item_orders
GROUP BY 
  test_assignment

-- Use this table to 
-- compute view_binary for the 30 day window after the test_start_date
-- for the test named item_test_2

SELECT
  test_assignment,
  COUNT(item_id)                                          AS items,
  SUM(view_binary_30d)                                    AS viewed_items,
  CAST(100*SUM(view_binary_30d)/COUNT(item_id) AS float)  AS viewed_percent,
  SUM(views)                                              AS views,
  SUM(views)/COUNT(item_id)                               AS average_views_per_item
FROM 
  (
  SELECT 
  final.test_assignment,
  final.item_id, 
  MAX(CASE WHEN item_views.event_time > final.test_start_date 
           THEN 1 ELSE 0 
           END)  AS view_binary_30d,
  COUNT(item_views.event_id) AS views
  FROM 
    dsv1069.final_assignments AS final 
  LEFT OUTER JOIN 
    (
    SELECT 
    event_time,
    event_id,
    CAST(parameter_value AS int) AS item_id
    FROM 
    dsv1069.events 
    WHERE 
    event_name = 'view_item'
    AND 
    parameter_name = 'item_id'
    ) AS item_views
  ON 
    final.item_id = item_views.item_id
  AND 
    item_views.event_time >= final.test_start_date
  AND 
    DATE_PART('day', item_views.event_time - final.test_start_date ) <= 30
  WHERE 
    final.test_number= 'item_test_2'
  GROUP BY
    final.test_assignment,
    final.item_id
  ) AS item_orders
GROUP BY 
 test_assignment